Document       <- Header* Definition* !.
Header         <- (Include / CppInclude / Namespace) NewLine
Include        <- 'include' Literal
CppInclude     <- 'cppinclude' Literal
Namespace      <- 'namespace' Language Scope Annotations?
Language       <- '*' / Identifier
Scope          <- Identifiers
Definition     <- (Const / Typedef / Enum / Struct / Union / Exception / Service) Annotations? ';'? NewLine
Const          <- 'const' FieldType Identifier '=' ConstValue
Typedef        <- 'typedef' FieldType Identifier
Enum           <- 'enum' Identifier '{' (Identifier ('=' IntLiteral)? Annotations? ListSeparator?)* '}'
Struct         <- 'struct' Identifier '{' Field* '}'
Union          <- 'union' Identifier '{' Field* '}'
Exception      <- 'exception' Identifier '{' Field* '}'
Service        <- 'service' Identifier ( 'extends' Identifiers )? '{' Function* '}'
Field          <- FieldId? FieldReq? FieldType Identifier ('=' ConstValue)? Annotations? ListSeparator?
FieldId        <- IntLiteral ':'
FieldReq       <- 'required' / 'optional'
Function       <- 'oneway'? FunctionType Identifier '(' Field* ')' Throws?  Annotations? ListSeparator? NewLine
FunctionType   <- 'void' / FieldType
Throws         <- 'throws' '(' Field* ')'
FieldType      <- (BaseType / ContainerType / Identifiers) Annotations?
BaseType       <- 'bool' / 'byte' / 'i8' / 'i16' / 'i32' / 'i64' / 'double' / 'string' / 'binary'
ContainerType  <- MapType / SetType / ListType
MapType        <- 'map' '<' FieldType ',' FieldType '>'
SetType        <- 'set' '<' FieldType '>'
ListType       <- 'list' '<' FieldType '>'
ConstValue     <- 'true' / 'false' / FloatLiteral / IntLiteral / Literal / Identifiers / ConstList / ConstMap
Annotations    <- '(' Annotation+ ')'
Annotation     <- Identifiers '=' Literal ListSeparator?
ConstList      <- '[' (ConstValue ListSeparator?)* ']'
ConstMap       <- '{' (ConstValue ':' ConstValue ListSeparator?)* '}'
Identifiers    <- Identifier ( '.' Identifier )*
ListSeparator  <- ',' / ';'
NewLine        <- '\n'
