// Copyright 2021 CloudWeGo
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by thriftgo (0.0.1). DO NOT EDIT.

package parser

import (
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

type FieldType int64

const (
	FieldType_Default  FieldType = 0
	FieldType_Required FieldType = 1
	FieldType_Optional FieldType = 2
)

func (p FieldType) String() string {
	switch p {
	case FieldType_Default:
		return "Default"
	case FieldType_Required:
		return "Required"
	case FieldType_Optional:
		return "Optional"
	}
	return "<UNSET>"
}

func FieldTypeFromString(s string) (FieldType, error) {
	switch s {
	case "Default":
		return FieldType_Default, nil
	case "Required":
		return FieldType_Required, nil
	case "Optional":
		return FieldType_Optional, nil
	}
	return FieldType(0), fmt.Errorf("not a valid FieldType string")
}

func FieldTypePtr(v FieldType) *FieldType { return &v }

func (p *FieldType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = FieldType(v)
	return nil
}

type ConstType int64

const (
	ConstType_ConstDouble     ConstType = 0
	ConstType_ConstInt        ConstType = 1
	ConstType_ConstLiteral    ConstType = 2
	ConstType_ConstIdentifier ConstType = 3
	ConstType_ConstList       ConstType = 4
	ConstType_ConstMap        ConstType = 5
)

func (p ConstType) String() string {
	switch p {
	case ConstType_ConstDouble:
		return "ConstDouble"
	case ConstType_ConstInt:
		return "ConstInt"
	case ConstType_ConstLiteral:
		return "ConstLiteral"
	case ConstType_ConstIdentifier:
		return "ConstIdentifier"
	case ConstType_ConstList:
		return "ConstList"
	case ConstType_ConstMap:
		return "ConstMap"
	}
	return "<UNSET>"
}

func ConstTypeFromString(s string) (ConstType, error) {
	switch s {
	case "ConstDouble":
		return ConstType_ConstDouble, nil
	case "ConstInt":
		return ConstType_ConstInt, nil
	case "ConstLiteral":
		return ConstType_ConstLiteral, nil
	case "ConstIdentifier":
		return ConstType_ConstIdentifier, nil
	case "ConstList":
		return ConstType_ConstList, nil
	case "ConstMap":
		return ConstType_ConstMap, nil
	}
	return ConstType(0), fmt.Errorf("not a valid ConstType string")
}

func ConstTypePtr(v ConstType) *ConstType { return &v }

func (p *ConstType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = ConstType(v)
	return nil
}

type Type struct {
	Name string `thrift:"Name,1" json:"Name"`

	KeyType *Type `thrift:"KeyType,2" json:"KeyType,omitempty"`

	ValueType *Type `thrift:"ValueType,3" json:"ValueType,omitempty"`

	CppType string `thrift:"CppType,4" json:"CppType"`

	Annotations map[string]string `thrift:"Annotations,5" json:"Annotations"`
}

func NewType() *Type {
	return &Type{}
}

func (p *Type) GetName() string {
	return p.Name
}

var Type_KeyType_DEFAULT *Type

func (p *Type) GetKeyType() *Type {
	if !p.IsSetKeyType() {
		return Type_KeyType_DEFAULT
	}
	return p.KeyType
}

var Type_ValueType_DEFAULT *Type

func (p *Type) GetValueType() *Type {
	if !p.IsSetValueType() {
		return Type_ValueType_DEFAULT
	}
	return p.ValueType
}

func (p *Type) GetCppType() string {
	return p.CppType
}

func (p *Type) GetAnnotations() map[string]string {
	return p.Annotations
}

func (p *Type) IsSetKeyType() bool {
	return p.KeyType != nil
}

func (p *Type) IsSetValueType() bool {
	return p.ValueType != nil
}

func (p *Type) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 1 'Name' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 1 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 2 'KeyType' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 2 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 3 'ValueType' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 3 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 4 'CppType' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 4 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 5:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField5(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 5 'Annotations' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 5 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T skip field %d type %d error: ", p, fieldId, fieldTypeId), err)
			}
		}

		if err := iprot.ReadFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Type) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading type String: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *Type) ReadField2(iprot thrift.TProtocol) error {
	p.KeyType = &Type{}
	if err := p.KeyType.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("error reading struct %T: ", p.KeyType), err)
	}
	return nil
}

func (p *Type) ReadField3(iprot thrift.TProtocol) error {
	p.ValueType = &Type{}
	if err := p.ValueType.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("error reading struct %T: ", p.ValueType), err)
	}
	return nil
}

func (p *Type) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading type String: ", err)
	} else {
		p.CppType = v
	}
	return nil
}

func (p *Type) ReadField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	p.Annotations = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading type String: ", err)
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading type String: ", err)
		} else {
			_val = v
		}

		p.Annotations[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *Type) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Type"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 1 'Name' error: ", p), err)
		}
		if err := p.writeField2(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 2 'KeyType' error: ", p), err)
		}
		if err := p.writeField3(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 3 'ValueType' error: ", p), err)
		}
		if err := p.writeField4(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 4 'CppType' error: ", p), err)
		}
		if err := p.writeField5(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 5 'Annotations' error: ", p), err)
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
	}
	return nil
}

func (p *Type) writeField1(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 1 'Name' begin error: ", p), err)
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return thrift.PrependError("error writing type String: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 1 'Name' end error: ", p), err)
	}
	return nil
}

func (p *Type) writeField2(oprot thrift.TProtocol) error {
	if p.IsSetKeyType() {
		if err := oprot.WriteFieldBegin("KeyType", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 2 'KeyType' begin error: ", p), err)
		}
		if err := p.KeyType.Write(oprot); err != nil {
			return err
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 2 'KeyType' end error: ", p), err)
		}
	}
	return nil
}

func (p *Type) writeField3(oprot thrift.TProtocol) error {
	if p.IsSetValueType() {
		if err := oprot.WriteFieldBegin("ValueType", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 3 'ValueType' begin error: ", p), err)
		}
		if err := p.ValueType.Write(oprot); err != nil {
			return err
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 3 'ValueType' end error: ", p), err)
		}
	}
	return nil
}

func (p *Type) writeField4(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("CppType", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 4 'CppType' begin error: ", p), err)
	}
	if err := oprot.WriteString(p.CppType); err != nil {
		return thrift.PrependError("error writing type String: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 4 'CppType' end error: ", p), err)
	}
	return nil
}

func (p *Type) writeField5(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Annotations", thrift.MAP, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 5 'Annotations' begin error: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Annotations)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Annotations {

		if err := oprot.WriteString(k); err != nil {
			return thrift.PrependError("error writing type String: ", err)
		}

		if err := oprot.WriteString(v); err != nil {
			return thrift.PrependError("error writing type String: ", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 5 'Annotations' end error: ", p), err)
	}
	return nil
}

type Namespace struct {
	Language string `thrift:"Language,1" json:"Language"`

	Name string `thrift:"Name,2" json:"Name"`

	Annotations map[string]string `thrift:"Annotations,3" json:"Annotations"`
}

func NewNamespace() *Namespace {
	return &Namespace{}
}

func (p *Namespace) GetLanguage() string {
	return p.Language
}

func (p *Namespace) GetName() string {
	return p.Name
}

func (p *Namespace) GetAnnotations() map[string]string {
	return p.Annotations
}

func (p *Namespace) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 1 'Language' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 1 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 2 'Name' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 2 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField3(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 3 'Annotations' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 3 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T skip field %d type %d error: ", p, fieldId, fieldTypeId), err)
			}
		}

		if err := iprot.ReadFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Namespace) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading type String: ", err)
	} else {
		p.Language = v
	}
	return nil
}

func (p *Namespace) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading type String: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *Namespace) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	p.Annotations = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading type String: ", err)
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading type String: ", err)
		} else {
			_val = v
		}

		p.Annotations[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *Namespace) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Namespace"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 1 'Language' error: ", p), err)
		}
		if err := p.writeField2(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 2 'Name' error: ", p), err)
		}
		if err := p.writeField3(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 3 'Annotations' error: ", p), err)
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
	}
	return nil
}

func (p *Namespace) writeField1(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Language", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 1 'Language' begin error: ", p), err)
	}
	if err := oprot.WriteString(p.Language); err != nil {
		return thrift.PrependError("error writing type String: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 1 'Language' end error: ", p), err)
	}
	return nil
}

func (p *Namespace) writeField2(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 2 'Name' begin error: ", p), err)
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return thrift.PrependError("error writing type String: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 2 'Name' end error: ", p), err)
	}
	return nil
}

func (p *Namespace) writeField3(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Annotations", thrift.MAP, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 3 'Annotations' begin error: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Annotations)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Annotations {

		if err := oprot.WriteString(k); err != nil {
			return thrift.PrependError("error writing type String: ", err)
		}

		if err := oprot.WriteString(v); err != nil {
			return thrift.PrependError("error writing type String: ", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 3 'Annotations' end error: ", p), err)
	}
	return nil
}

func (p *Namespace) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Namespace(%+v)", *p)
}

type Typedef struct {
	Type *Type `thrift:"Type,1" json:"Type,omitempty"`

	Alias string `thrift:"Alias,2" json:"Alias"`

	Annotations map[string]string `thrift:"Annotations,3" json:"Annotations"`
}

func NewTypedef() *Typedef {
	return &Typedef{}
}

var Typedef_Type_DEFAULT *Type

func (p *Typedef) GetType() *Type {
	if !p.IsSetType() {
		return Typedef_Type_DEFAULT
	}
	return p.Type
}

func (p *Typedef) GetAlias() string {
	return p.Alias
}

func (p *Typedef) GetAnnotations() map[string]string {
	return p.Annotations
}

func (p *Typedef) IsSetType() bool {
	return p.Type != nil
}

func (p *Typedef) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 1 'Type' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 1 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 2 'Alias' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 2 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField3(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 3 'Annotations' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 3 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T skip field %d type %d error: ", p, fieldId, fieldTypeId), err)
			}
		}

		if err := iprot.ReadFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Typedef) ReadField1(iprot thrift.TProtocol) error {
	p.Type = &Type{}
	if err := p.Type.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("error reading struct %T: ", p.Type), err)
	}
	return nil
}

func (p *Typedef) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading type String: ", err)
	} else {
		p.Alias = v
	}
	return nil
}

func (p *Typedef) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	p.Annotations = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading type String: ", err)
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading type String: ", err)
		} else {
			_val = v
		}

		p.Annotations[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *Typedef) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Typedef"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 1 'Type' error: ", p), err)
		}
		if err := p.writeField2(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 2 'Alias' error: ", p), err)
		}
		if err := p.writeField3(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 3 'Annotations' error: ", p), err)
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
	}
	return nil
}

func (p *Typedef) writeField1(oprot thrift.TProtocol) error {
	if p.IsSetType() {
		if err := oprot.WriteFieldBegin("Type", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 1 'Type' begin error: ", p), err)
		}
		if err := p.Type.Write(oprot); err != nil {
			return err
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 1 'Type' end error: ", p), err)
		}
	}
	return nil
}

func (p *Typedef) writeField2(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Alias", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 2 'Alias' begin error: ", p), err)
	}
	if err := oprot.WriteString(p.Alias); err != nil {
		return thrift.PrependError("error writing type String: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 2 'Alias' end error: ", p), err)
	}
	return nil
}

func (p *Typedef) writeField3(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Annotations", thrift.MAP, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 3 'Annotations' begin error: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Annotations)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Annotations {

		if err := oprot.WriteString(k); err != nil {
			return thrift.PrependError("error writing type String: ", err)
		}

		if err := oprot.WriteString(v); err != nil {
			return thrift.PrependError("error writing type String: ", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 3 'Annotations' end error: ", p), err)
	}
	return nil
}

func (p *Typedef) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Typedef(%+v)", *p)
}

type EnumValue struct {
	Name string `thrift:"Name,1" json:"Name"`

	Value int64 `thrift:"Value,2" json:"Value"`

	Annotations map[string]string `thrift:"Annotations,3" json:"Annotations"`
}

func NewEnumValue() *EnumValue {
	return &EnumValue{}
}

func (p *EnumValue) GetName() string {
	return p.Name
}

func (p *EnumValue) GetValue() int64 {
	return p.Value
}

func (p *EnumValue) GetAnnotations() map[string]string {
	return p.Annotations
}

func (p *EnumValue) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 1 'Name' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 1 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 2 'Value' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 2 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField3(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 3 'Annotations' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 3 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T skip field %d type %d error: ", p, fieldId, fieldTypeId), err)
			}
		}

		if err := iprot.ReadFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *EnumValue) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading type String: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *EnumValue) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading type I64: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *EnumValue) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	p.Annotations = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading type String: ", err)
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading type String: ", err)
		} else {
			_val = v
		}

		p.Annotations[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *EnumValue) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("EnumValue"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 1 'Name' error: ", p), err)
		}
		if err := p.writeField2(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 2 'Value' error: ", p), err)
		}
		if err := p.writeField3(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 3 'Annotations' error: ", p), err)
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
	}
	return nil
}

func (p *EnumValue) writeField1(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 1 'Name' begin error: ", p), err)
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return thrift.PrependError("error writing type String: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 1 'Name' end error: ", p), err)
	}
	return nil
}

func (p *EnumValue) writeField2(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Value", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 2 'Value' begin error: ", p), err)
	}
	if err := oprot.WriteI64(p.Value); err != nil {
		return thrift.PrependError("error writing type I64: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 2 'Value' end error: ", p), err)
	}
	return nil
}

func (p *EnumValue) writeField3(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Annotations", thrift.MAP, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 3 'Annotations' begin error: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Annotations)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Annotations {

		if err := oprot.WriteString(k); err != nil {
			return thrift.PrependError("error writing type String: ", err)
		}

		if err := oprot.WriteString(v); err != nil {
			return thrift.PrependError("error writing type String: ", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 3 'Annotations' end error: ", p), err)
	}
	return nil
}

func (p *EnumValue) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EnumValue(%+v)", *p)
}

type Enum struct {
	Name string `thrift:"Name,1" json:"Name"`

	Values []*EnumValue `thrift:"Values,2" json:"Values"`

	Annotations map[string]string `thrift:"Annotations,3" json:"Annotations"`
}

func NewEnum() *Enum {
	return &Enum{}
}

func (p *Enum) GetName() string {
	return p.Name
}

func (p *Enum) GetValues() []*EnumValue {
	return p.Values
}

func (p *Enum) GetAnnotations() map[string]string {
	return p.Annotations
}

func (p *Enum) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 1 'Name' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 1 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 2 'Values' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 2 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField3(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 3 'Annotations' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 3 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T skip field %d type %d error: ", p, fieldId, fieldTypeId), err)
			}
		}

		if err := iprot.ReadFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Enum) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading type String: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *Enum) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	p.Values = make([]*EnumValue, 0, size)
	for i := 0; i < size; i++ {
		_elem := &EnumValue{}
		if err := _elem.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("error reading struct %T: ", _elem), err)
		}

		p.Values = append(p.Values, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Enum) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	p.Annotations = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading type String: ", err)
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading type String: ", err)
		} else {
			_val = v
		}

		p.Annotations[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *Enum) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Enum"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 1 'Name' error: ", p), err)
		}
		if err := p.writeField2(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 2 'Values' error: ", p), err)
		}
		if err := p.writeField3(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 3 'Annotations' error: ", p), err)
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
	}
	return nil
}

func (p *Enum) writeField1(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 1 'Name' begin error: ", p), err)
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return thrift.PrependError("error writing type String: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 1 'Name' end error: ", p), err)
	}
	return nil
}

func (p *Enum) writeField2(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Values", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 2 'Values' begin error: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Values)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Values {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 2 'Values' end error: ", p), err)
	}
	return nil
}

func (p *Enum) writeField3(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Annotations", thrift.MAP, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 3 'Annotations' begin error: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Annotations)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Annotations {

		if err := oprot.WriteString(k); err != nil {
			return thrift.PrependError("error writing type String: ", err)
		}

		if err := oprot.WriteString(v); err != nil {
			return thrift.PrependError("error writing type String: ", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 3 'Annotations' end error: ", p), err)
	}
	return nil
}

func (p *Enum) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Enum(%+v)", *p)
}

type ConstValue struct {
	Type ConstType `thrift:"Type,1" json:"Type"`

	TypedValue *ConstTypedValue `thrift:"TypedValue,2" json:"TypedValue,omitempty"`
}

func NewConstValue() *ConstValue {
	return &ConstValue{}
}

func (p *ConstValue) GetType() ConstType {
	return p.Type
}

var ConstValue_TypedValue_DEFAULT *ConstTypedValue

func (p *ConstValue) GetTypedValue() *ConstTypedValue {
	if !p.IsSetTypedValue() {
		return ConstValue_TypedValue_DEFAULT
	}
	return p.TypedValue
}

func (p *ConstValue) IsSetTypedValue() bool {
	return p.TypedValue != nil
}

func (p *ConstValue) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 1 'Type' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 1 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 2 'TypedValue' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 2 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T skip field %d type %d error: ", p, fieldId, fieldTypeId), err)
			}
		}

		if err := iprot.ReadFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ConstValue) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading type I32: ", err)
	} else {
		p.Type = ConstType(v)
	}
	return nil
}

func (p *ConstValue) ReadField2(iprot thrift.TProtocol) error {
	p.TypedValue = &ConstTypedValue{}
	if err := p.TypedValue.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("error reading struct %T: ", p.TypedValue), err)
	}
	return nil
}

func (p *ConstValue) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ConstValue"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 1 'Type' error: ", p), err)
		}
		if err := p.writeField2(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 2 'TypedValue' error: ", p), err)
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
	}
	return nil
}

func (p *ConstValue) writeField1(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Type", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 1 'Type' begin error: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError("error writing type I32: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 1 'Type' end error: ", p), err)
	}
	return nil
}

func (p *ConstValue) writeField2(oprot thrift.TProtocol) error {
	if p.IsSetTypedValue() {
		if err := oprot.WriteFieldBegin("TypedValue", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 2 'TypedValue' begin error: ", p), err)
		}
		if err := p.TypedValue.Write(oprot); err != nil {
			return err
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 2 'TypedValue' end error: ", p), err)
		}
	}
	return nil
}

type MapConstValue struct {
	Key *ConstValue `thrift:"Key,1" json:"Key,omitempty"`

	Value *ConstValue `thrift:"Value,2" json:"Value,omitempty"`
}

func NewMapConstValue() *MapConstValue {
	return &MapConstValue{}
}

var MapConstValue_Key_DEFAULT *ConstValue

func (p *MapConstValue) GetKey() *ConstValue {
	if !p.IsSetKey() {
		return MapConstValue_Key_DEFAULT
	}
	return p.Key
}

var MapConstValue_Value_DEFAULT *ConstValue

func (p *MapConstValue) GetValue() *ConstValue {
	if !p.IsSetValue() {
		return MapConstValue_Value_DEFAULT
	}
	return p.Value
}

func (p *MapConstValue) IsSetKey() bool {
	return p.Key != nil
}

func (p *MapConstValue) IsSetValue() bool {
	return p.Value != nil
}

func (p *MapConstValue) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 1 'Key' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 1 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 2 'Value' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 2 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T skip field %d type %d error: ", p, fieldId, fieldTypeId), err)
			}
		}

		if err := iprot.ReadFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MapConstValue) ReadField1(iprot thrift.TProtocol) error {
	p.Key = &ConstValue{}
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("error reading struct %T: ", p.Key), err)
	}
	return nil
}

func (p *MapConstValue) ReadField2(iprot thrift.TProtocol) error {
	p.Value = &ConstValue{}
	if err := p.Value.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("error reading struct %T: ", p.Value), err)
	}
	return nil
}

func (p *MapConstValue) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MapConstValue"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 1 'Key' error: ", p), err)
		}
		if err := p.writeField2(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 2 'Value' error: ", p), err)
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
	}
	return nil
}

func (p *MapConstValue) writeField1(oprot thrift.TProtocol) error {
	if p.IsSetKey() {
		if err := oprot.WriteFieldBegin("Key", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 1 'Key' begin error: ", p), err)
		}
		if err := p.Key.Write(oprot); err != nil {
			return err
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 1 'Key' end error: ", p), err)
		}
	}
	return nil
}

func (p *MapConstValue) writeField2(oprot thrift.TProtocol) error {
	if p.IsSetValue() {
		if err := oprot.WriteFieldBegin("Value", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 2 'Value' begin error: ", p), err)
		}
		if err := p.Value.Write(oprot); err != nil {
			return err
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 2 'Value' end error: ", p), err)
		}
	}
	return nil
}

func (p *MapConstValue) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MapConstValue(%+v)", *p)
}

type Constant struct {
	Name string `thrift:"Name,1" json:"Name"`

	Type *Type `thrift:"Type,2" json:"Type,omitempty"`

	Value *ConstValue `thrift:"Value,3" json:"Value,omitempty"`

	Annotations map[string]string `thrift:"Annotations,4" json:"Annotations"`
}

func NewConstant() *Constant {
	return &Constant{}
}

func (p *Constant) GetName() string {
	return p.Name
}

var Constant_Type_DEFAULT *Type

func (p *Constant) GetType() *Type {
	if !p.IsSetType() {
		return Constant_Type_DEFAULT
	}
	return p.Type
}

var Constant_Value_DEFAULT *ConstValue

func (p *Constant) GetValue() *ConstValue {
	if !p.IsSetValue() {
		return Constant_Value_DEFAULT
	}
	return p.Value
}

func (p *Constant) GetAnnotations() map[string]string {
	return p.Annotations
}

func (p *Constant) IsSetType() bool {
	return p.Type != nil
}

func (p *Constant) IsSetValue() bool {
	return p.Value != nil
}

func (p *Constant) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 1 'Name' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 1 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 2 'Type' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 2 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 3 'Value' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 3 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField4(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 4 'Annotations' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 4 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T skip field %d type %d error: ", p, fieldId, fieldTypeId), err)
			}
		}

		if err := iprot.ReadFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Constant) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading type String: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *Constant) ReadField2(iprot thrift.TProtocol) error {
	p.Type = &Type{}
	if err := p.Type.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("error reading struct %T: ", p.Type), err)
	}
	return nil
}

func (p *Constant) ReadField3(iprot thrift.TProtocol) error {
	p.Value = &ConstValue{}
	if err := p.Value.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("error reading struct %T: ", p.Value), err)
	}
	return nil
}

func (p *Constant) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	p.Annotations = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading type String: ", err)
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading type String: ", err)
		} else {
			_val = v
		}

		p.Annotations[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *Constant) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Constant"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 1 'Name' error: ", p), err)
		}
		if err := p.writeField2(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 2 'Type' error: ", p), err)
		}
		if err := p.writeField3(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 3 'Value' error: ", p), err)
		}
		if err := p.writeField4(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 4 'Annotations' error: ", p), err)
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
	}
	return nil
}

func (p *Constant) writeField1(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 1 'Name' begin error: ", p), err)
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return thrift.PrependError("error writing type String: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 1 'Name' end error: ", p), err)
	}
	return nil
}

func (p *Constant) writeField2(oprot thrift.TProtocol) error {
	if p.IsSetType() {
		if err := oprot.WriteFieldBegin("Type", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 2 'Type' begin error: ", p), err)
		}
		if err := p.Type.Write(oprot); err != nil {
			return err
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 2 'Type' end error: ", p), err)
		}
	}
	return nil
}

func (p *Constant) writeField3(oprot thrift.TProtocol) error {
	if p.IsSetValue() {
		if err := oprot.WriteFieldBegin("Value", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 3 'Value' begin error: ", p), err)
		}
		if err := p.Value.Write(oprot); err != nil {
			return err
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 3 'Value' end error: ", p), err)
		}
	}
	return nil
}

func (p *Constant) writeField4(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Annotations", thrift.MAP, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 4 'Annotations' begin error: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Annotations)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Annotations {

		if err := oprot.WriteString(k); err != nil {
			return thrift.PrependError("error writing type String: ", err)
		}

		if err := oprot.WriteString(v); err != nil {
			return thrift.PrependError("error writing type String: ", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 4 'Annotations' end error: ", p), err)
	}
	return nil
}

func (p *Constant) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Constant(%+v)", *p)
}

type Field struct {
	ID int32 `thrift:"ID,1" json:"ID"`

	Name string `thrift:"Name,2" json:"Name"`

	Requiredness FieldType `thrift:"Requiredness,3" json:"Requiredness"`

	Type *Type `thrift:"Type,4" json:"Type"`

	Default *ConstValue `thrift:"Default,5" json:"Default,omitempty"`

	Annotations map[string]string `thrift:"Annotations,6" json:"Annotations"`
}

func NewField() *Field {
	return &Field{}
}

func (p *Field) GetID() int32 {
	return p.ID
}

func (p *Field) GetName() string {
	return p.Name
}

func (p *Field) GetRequiredness() FieldType {
	return p.Requiredness
}

var Field_Type_DEFAULT *Type

func (p *Field) GetType() *Type {
	if !p.IsSetType() {
		return Field_Type_DEFAULT
	}
	return p.Type
}

var Field_Default_DEFAULT *ConstValue

func (p *Field) GetDefault() *ConstValue {
	if !p.IsSetDefault() {
		return Field_Default_DEFAULT
	}
	return p.Default
}

func (p *Field) GetAnnotations() map[string]string {
	return p.Annotations
}

func (p *Field) IsSetType() bool {
	return p.Type != nil
}

func (p *Field) IsSetDefault() bool {
	return p.Default != nil
}

func (p *Field) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 1 'ID' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 1 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 2 'Name' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 2 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 3 'Requiredness' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 3 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField4(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 4 'Type' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 4 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField5(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 5 'Default' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 5 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 6:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField6(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 6 'Annotations' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 6 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T skip field %d type %d error: ", p, fieldId, fieldTypeId), err)
			}
		}

		if err := iprot.ReadFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Field) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading type I32: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Field) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading type String: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *Field) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading type I32: ", err)
	} else {
		p.Requiredness = FieldType(v)
	}
	return nil
}

func (p *Field) ReadField4(iprot thrift.TProtocol) error {
	p.Type = &Type{}
	if err := p.Type.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("error reading struct %T: ", p.Type), err)
	}
	return nil
}

func (p *Field) ReadField5(iprot thrift.TProtocol) error {
	p.Default = &ConstValue{}
	if err := p.Default.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("error reading struct %T: ", p.Default), err)
	}
	return nil
}

func (p *Field) ReadField6(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	p.Annotations = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading type String: ", err)
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading type String: ", err)
		} else {
			_val = v
		}

		p.Annotations[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *Field) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Field"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 1 'ID' error: ", p), err)
		}
		if err := p.writeField2(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 2 'Name' error: ", p), err)
		}
		if err := p.writeField3(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 3 'Requiredness' error: ", p), err)
		}
		if err := p.writeField4(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 4 'Type' error: ", p), err)
		}
		if err := p.writeField5(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 5 'Default' error: ", p), err)
		}
		if err := p.writeField6(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 6 'Annotations' error: ", p), err)
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
	}
	return nil
}

func (p *Field) writeField1(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("ID", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 1 'ID' begin error: ", p), err)
	}
	if err := oprot.WriteI32(p.ID); err != nil {
		return thrift.PrependError("error writing type I32: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 1 'ID' end error: ", p), err)
	}
	return nil
}

func (p *Field) writeField2(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 2 'Name' begin error: ", p), err)
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return thrift.PrependError("error writing type String: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 2 'Name' end error: ", p), err)
	}
	return nil
}

func (p *Field) writeField3(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Requiredness", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 3 'Requiredness' begin error: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Requiredness)); err != nil {
		return thrift.PrependError("error writing type I32: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 3 'Requiredness' end error: ", p), err)
	}
	return nil
}

func (p *Field) writeField4(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Type", thrift.STRUCT, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 4 'Type' begin error: ", p), err)
	}
	if err := p.Type.Write(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 4 'Type' end error: ", p), err)
	}
	return nil
}

func (p *Field) writeField5(oprot thrift.TProtocol) error {
	if p.IsSetDefault() {
		if err := oprot.WriteFieldBegin("Default", thrift.STRUCT, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 5 'Default' begin error: ", p), err)
		}
		if err := p.Default.Write(oprot); err != nil {
			return err
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 5 'Default' end error: ", p), err)
		}
	}
	return nil
}

func (p *Field) writeField6(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Annotations", thrift.MAP, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 6 'Annotations' begin error: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Annotations)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Annotations {

		if err := oprot.WriteString(k); err != nil {
			return thrift.PrependError("error writing type String: ", err)
		}

		if err := oprot.WriteString(v); err != nil {
			return thrift.PrependError("error writing type String: ", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 6 'Annotations' end error: ", p), err)
	}
	return nil
}

func (p *Field) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Field(%+v)", *p)
}

type StructLike struct {
	Category string `thrift:"Category,1" json:"Category"`

	Name string `thrift:"Name,2" json:"Name"`

	Fields []*Field `thrift:"Fields,3" json:"Fields"`

	Annotations map[string]string `thrift:"Annotations,4" json:"Annotations"`
}

func NewStructLike() *StructLike {
	return &StructLike{}
}

func (p *StructLike) GetCategory() string {
	return p.Category
}

func (p *StructLike) GetName() string {
	return p.Name
}

func (p *StructLike) GetFields() []*Field {
	return p.Fields
}

func (p *StructLike) GetAnnotations() map[string]string {
	return p.Annotations
}

func (p *StructLike) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 1 'Category' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 1 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 2 'Name' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 2 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 3 'Fields' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 3 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField4(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 4 'Annotations' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 4 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T skip field %d type %d error: ", p, fieldId, fieldTypeId), err)
			}
		}

		if err := iprot.ReadFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *StructLike) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading type String: ", err)
	} else {
		p.Category = v
	}
	return nil
}

func (p *StructLike) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading type String: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *StructLike) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	p.Fields = make([]*Field, 0, size)
	for i := 0; i < size; i++ {
		_elem := &Field{}
		if err := _elem.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("error reading struct %T: ", _elem), err)
		}

		p.Fields = append(p.Fields, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *StructLike) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	p.Annotations = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading type String: ", err)
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading type String: ", err)
		} else {
			_val = v
		}

		p.Annotations[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *StructLike) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("StructLike"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 1 'Category' error: ", p), err)
		}
		if err := p.writeField2(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 2 'Name' error: ", p), err)
		}
		if err := p.writeField3(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 3 'Fields' error: ", p), err)
		}
		if err := p.writeField4(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 4 'Annotations' error: ", p), err)
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
	}
	return nil
}

func (p *StructLike) writeField1(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Category", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 1 'Category' begin error: ", p), err)
	}
	if err := oprot.WriteString(p.Category); err != nil {
		return thrift.PrependError("error writing type String: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 1 'Category' end error: ", p), err)
	}
	return nil
}

func (p *StructLike) writeField2(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 2 'Name' begin error: ", p), err)
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return thrift.PrependError("error writing type String: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 2 'Name' end error: ", p), err)
	}
	return nil
}

func (p *StructLike) writeField3(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Fields", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 3 'Fields' begin error: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Fields)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Fields {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 3 'Fields' end error: ", p), err)
	}
	return nil
}

func (p *StructLike) writeField4(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Annotations", thrift.MAP, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 4 'Annotations' begin error: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Annotations)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Annotations {

		if err := oprot.WriteString(k); err != nil {
			return thrift.PrependError("error writing type String: ", err)
		}

		if err := oprot.WriteString(v); err != nil {
			return thrift.PrependError("error writing type String: ", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 4 'Annotations' end error: ", p), err)
	}
	return nil
}

func (p *StructLike) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StructLike(%+v)", *p)
}

type Function struct {
	Name string `thrift:"Name,1" json:"Name"`

	Oneway bool `thrift:"Oneway,2" json:"Oneway"`

	Void bool `thrift:"Void,3" json:"Void"`

	FunctionType *Type `thrift:"FunctionType,4" json:"FunctionType,omitempty"`

	Arguments []*Field `thrift:"Arguments,5" json:"Arguments"`

	Throws []*Field `thrift:"Throws,6" json:"Throws"`

	Annotations map[string]string `thrift:"Annotations,7" json:"Annotations"`
}

func NewFunction() *Function {
	return &Function{}
}

func (p *Function) GetName() string {
	return p.Name
}

func (p *Function) GetOneway() bool {
	return p.Oneway
}

func (p *Function) GetVoid() bool {
	return p.Void
}

var Function_FunctionType_DEFAULT *Type

func (p *Function) GetFunctionType() *Type {
	if !p.IsSetFunctionType() {
		return Function_FunctionType_DEFAULT
	}
	return p.FunctionType
}

func (p *Function) GetArguments() []*Field {
	return p.Arguments
}

func (p *Function) GetThrows() []*Field {
	return p.Throws
}

func (p *Function) GetAnnotations() map[string]string {
	return p.Annotations
}

func (p *Function) IsSetFunctionType() bool {
	return p.FunctionType != nil
}

func (p *Function) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 1 'Name' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 1 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField2(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 2 'Oneway' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 2 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField3(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 3 'Void' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 3 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField4(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 4 'FunctionType' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 4 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField5(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 5 'Arguments' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 5 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField6(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 6 'Throws' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 6 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 7:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField7(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 7 'Annotations' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 7 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T skip field %d type %d error: ", p, fieldId, fieldTypeId), err)
			}
		}

		if err := iprot.ReadFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Function) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading type String: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *Function) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading type Bool: ", err)
	} else {
		p.Oneway = v
	}
	return nil
}

func (p *Function) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading type Bool: ", err)
	} else {
		p.Void = v
	}
	return nil
}

func (p *Function) ReadField4(iprot thrift.TProtocol) error {
	p.FunctionType = &Type{}
	if err := p.FunctionType.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("error reading struct %T: ", p.FunctionType), err)
	}
	return nil
}

func (p *Function) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	p.Arguments = make([]*Field, 0, size)
	for i := 0; i < size; i++ {
		_elem := &Field{}
		if err := _elem.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("error reading struct %T: ", _elem), err)
		}

		p.Arguments = append(p.Arguments, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Function) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	p.Throws = make([]*Field, 0, size)
	for i := 0; i < size; i++ {
		_elem := &Field{}
		if err := _elem.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("error reading struct %T: ", _elem), err)
		}

		p.Throws = append(p.Throws, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Function) ReadField7(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	p.Annotations = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading type String: ", err)
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading type String: ", err)
		} else {
			_val = v
		}

		p.Annotations[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *Function) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Function"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 1 'Name' error: ", p), err)
		}
		if err := p.writeField2(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 2 'Oneway' error: ", p), err)
		}
		if err := p.writeField3(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 3 'Void' error: ", p), err)
		}
		if err := p.writeField4(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 4 'FunctionType' error: ", p), err)
		}
		if err := p.writeField5(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 5 'Arguments' error: ", p), err)
		}
		if err := p.writeField6(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 6 'Throws' error: ", p), err)
		}
		if err := p.writeField7(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 7 'Annotations' error: ", p), err)
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
	}
	return nil
}

func (p *Function) writeField1(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 1 'Name' begin error: ", p), err)
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return thrift.PrependError("error writing type String: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 1 'Name' end error: ", p), err)
	}
	return nil
}

func (p *Function) writeField2(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Oneway", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 2 'Oneway' begin error: ", p), err)
	}
	if err := oprot.WriteBool(p.Oneway); err != nil {
		return thrift.PrependError("error writing type Bool: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 2 'Oneway' end error: ", p), err)
	}
	return nil
}

func (p *Function) writeField3(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Void", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 3 'Void' begin error: ", p), err)
	}
	if err := oprot.WriteBool(p.Void); err != nil {
		return thrift.PrependError("error writing type Bool: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 3 'Void' end error: ", p), err)
	}
	return nil
}

func (p *Function) writeField4(oprot thrift.TProtocol) error {
	if p.IsSetFunctionType() {
		if err := oprot.WriteFieldBegin("FunctionType", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 4 'FunctionType' begin error: ", p), err)
		}
		if err := p.FunctionType.Write(oprot); err != nil {
			return err
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 4 'FunctionType' end error: ", p), err)
		}
	}
	return nil
}

func (p *Function) writeField5(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Arguments", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 5 'Arguments' begin error: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Arguments)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Arguments {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 5 'Arguments' end error: ", p), err)
	}
	return nil
}

func (p *Function) writeField6(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Throws", thrift.LIST, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 6 'Throws' begin error: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Throws)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Throws {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 6 'Throws' end error: ", p), err)
	}
	return nil
}

func (p *Function) writeField7(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Annotations", thrift.MAP, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 7 'Annotations' begin error: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Annotations)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Annotations {

		if err := oprot.WriteString(k); err != nil {
			return thrift.PrependError("error writing type String: ", err)
		}

		if err := oprot.WriteString(v); err != nil {
			return thrift.PrependError("error writing type String: ", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 7 'Annotations' end error: ", p), err)
	}
	return nil
}

func (p *Function) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Function(%+v)", *p)
}

type Service struct {
	Name string `thrift:"Name,1" json:"Name"`

	Extends string `thrift:"Extends,2" json:"Extends"`

	Functions []*Function `thrift:"Functions,3" json:"Functions"`

	Annotations map[string]string `thrift:"Annotations,4" json:"Annotations"`
}

func NewService() *Service {
	return &Service{}
}

func (p *Service) GetName() string {
	return p.Name
}

func (p *Service) GetExtends() string {
	return p.Extends
}

func (p *Service) GetFunctions() []*Function {
	return p.Functions
}

func (p *Service) GetAnnotations() map[string]string {
	return p.Annotations
}

func (p *Service) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 1 'Name' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 1 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 2 'Extends' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 2 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 3 'Functions' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 3 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField4(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 4 'Annotations' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 4 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T skip field %d type %d error: ", p, fieldId, fieldTypeId), err)
			}
		}

		if err := iprot.ReadFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Service) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading type String: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *Service) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading type String: ", err)
	} else {
		p.Extends = v
	}
	return nil
}

func (p *Service) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	p.Functions = make([]*Function, 0, size)
	for i := 0; i < size; i++ {
		_elem := &Function{}
		if err := _elem.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("error reading struct %T: ", _elem), err)
		}

		p.Functions = append(p.Functions, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Service) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	p.Annotations = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading type String: ", err)
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading type String: ", err)
		} else {
			_val = v
		}

		p.Annotations[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *Service) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Service"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 1 'Name' error: ", p), err)
		}
		if err := p.writeField2(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 2 'Extends' error: ", p), err)
		}
		if err := p.writeField3(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 3 'Functions' error: ", p), err)
		}
		if err := p.writeField4(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 4 'Annotations' error: ", p), err)
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
	}
	return nil
}

func (p *Service) writeField1(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 1 'Name' begin error: ", p), err)
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return thrift.PrependError("error writing type String: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 1 'Name' end error: ", p), err)
	}
	return nil
}

func (p *Service) writeField2(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Extends", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 2 'Extends' begin error: ", p), err)
	}
	if err := oprot.WriteString(p.Extends); err != nil {
		return thrift.PrependError("error writing type String: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 2 'Extends' end error: ", p), err)
	}
	return nil
}

func (p *Service) writeField3(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Functions", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 3 'Functions' begin error: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Functions)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Functions {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 3 'Functions' end error: ", p), err)
	}
	return nil
}

func (p *Service) writeField4(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Annotations", thrift.MAP, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 4 'Annotations' begin error: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Annotations)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Annotations {

		if err := oprot.WriteString(k); err != nil {
			return thrift.PrependError("error writing type String: ", err)
		}

		if err := oprot.WriteString(v); err != nil {
			return thrift.PrependError("error writing type String: ", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 4 'Annotations' end error: ", p), err)
	}
	return nil
}

func (p *Service) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Service(%+v)", *p)
}

type Include struct {
	Path string `thrift:"Path,1" json:"Path"`

	Reference *Thrift `thrift:"Reference,2" json:"Reference,omitempty"`
}

func NewInclude() *Include {
	return &Include{}
}

func (p *Include) GetPath() string {
	return p.Path
}

var Include_Reference_DEFAULT *Thrift

func (p *Include) GetReference() *Thrift {
	if !p.IsSetReference() {
		return Include_Reference_DEFAULT
	}
	return p.Reference
}

func (p *Include) IsSetReference() bool {
	return p.Reference != nil
}

func (p *Include) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 1 'Path' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 1 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 2 'Reference' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 2 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T skip field %d type %d error: ", p, fieldId, fieldTypeId), err)
			}
		}

		if err := iprot.ReadFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Include) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading type String: ", err)
	} else {
		p.Path = v
	}
	return nil
}

func (p *Include) ReadField2(iprot thrift.TProtocol) error {
	p.Reference = &Thrift{}
	if err := p.Reference.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("error reading struct %T: ", p.Reference), err)
	}
	return nil
}

func (p *Include) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Include"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 1 'Path' error: ", p), err)
		}
		if err := p.writeField2(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 2 'Reference' error: ", p), err)
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
	}
	return nil
}

func (p *Include) writeField1(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Path", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 1 'Path' begin error: ", p), err)
	}
	if err := oprot.WriteString(p.Path); err != nil {
		return thrift.PrependError("error writing type String: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 1 'Path' end error: ", p), err)
	}
	return nil
}

func (p *Include) writeField2(oprot thrift.TProtocol) error {
	if p.IsSetReference() {
		if err := oprot.WriteFieldBegin("Reference", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 2 'Reference' begin error: ", p), err)
		}
		if err := p.Reference.Write(oprot); err != nil {
			return err
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 2 'Reference' end error: ", p), err)
		}
	}
	return nil
}

func (p *Include) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Include(%+v)", *p)
}

type Thrift struct {
	Filename string `thrift:"Filename,1" json:"Filename"`

	Includes []*Include `thrift:"Includes,2" json:"Includes"`

	CppIncludes []string `thrift:"CppIncludes,3" json:"CppIncludes"`

	Namespaces []*Namespace `thrift:"Namespaces,4" json:"Namespaces"`

	Typedefs []*Typedef `thrift:"Typedefs,5" json:"Typedefs"`

	Constants []*Constant `thrift:"Constants,6" json:"Constants"`

	Enums []*Enum `thrift:"Enums,7" json:"Enums"`

	Structs []*StructLike `thrift:"Structs,8" json:"Structs"`

	Unions []*StructLike `thrift:"Unions,9" json:"Unions"`

	Exceptions []*StructLike `thrift:"Exceptions,10" json:"Exceptions"`

	Services []*Service `thrift:"Services,11" json:"Services"`
}

func NewThrift() *Thrift {
	return &Thrift{}
}

func (p *Thrift) GetFilename() string {
	return p.Filename
}

func (p *Thrift) GetIncludes() []*Include {
	return p.Includes
}

func (p *Thrift) GetCppIncludes() []string {
	return p.CppIncludes
}

func (p *Thrift) GetNamespaces() []*Namespace {
	return p.Namespaces
}

func (p *Thrift) GetTypedefs() []*Typedef {
	return p.Typedefs
}

func (p *Thrift) GetConstants() []*Constant {
	return p.Constants
}

func (p *Thrift) GetEnums() []*Enum {
	return p.Enums
}

func (p *Thrift) GetStructs() []*StructLike {
	return p.Structs
}

func (p *Thrift) GetUnions() []*StructLike {
	return p.Unions
}

func (p *Thrift) GetExceptions() []*StructLike {
	return p.Exceptions
}

func (p *Thrift) GetServices() []*Service {
	return p.Services
}

func (p *Thrift) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 1 'Filename' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 1 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 2 'Includes' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 2 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 3 'CppIncludes' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 3 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 4 'Namespaces' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 4 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField5(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 5 'Typedefs' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 5 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField6(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 6 'Constants' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 6 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField7(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 7 'Enums' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 7 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField8(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 8 'Structs' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 8 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 9:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField9(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 9 'Unions' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 9 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField10(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 10 'Exceptions' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 10 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 11:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField11(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 11 'Services' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 11 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T skip field %d type %d error: ", p, fieldId, fieldTypeId), err)
			}
		}

		if err := iprot.ReadFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Thrift) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading type String: ", err)
	} else {
		p.Filename = v
	}
	return nil
}

func (p *Thrift) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	p.Includes = make([]*Include, 0, size)
	for i := 0; i < size; i++ {
		_elem := &Include{}
		if err := _elem.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("error reading struct %T: ", _elem), err)
		}

		p.Includes = append(p.Includes, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Thrift) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	p.CppIncludes = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading type String: ", err)
		} else {
			_elem = v
		}

		p.CppIncludes = append(p.CppIncludes, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Thrift) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	p.Namespaces = make([]*Namespace, 0, size)
	for i := 0; i < size; i++ {
		_elem := &Namespace{}
		if err := _elem.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("error reading struct %T: ", _elem), err)
		}

		p.Namespaces = append(p.Namespaces, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Thrift) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	p.Typedefs = make([]*Typedef, 0, size)
	for i := 0; i < size; i++ {
		_elem := &Typedef{}
		if err := _elem.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("error reading struct %T: ", _elem), err)
		}

		p.Typedefs = append(p.Typedefs, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Thrift) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	p.Constants = make([]*Constant, 0, size)
	for i := 0; i < size; i++ {
		_elem := &Constant{}
		if err := _elem.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("error reading struct %T: ", _elem), err)
		}

		p.Constants = append(p.Constants, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Thrift) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	p.Enums = make([]*Enum, 0, size)
	for i := 0; i < size; i++ {
		_elem := &Enum{}
		if err := _elem.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("error reading struct %T: ", _elem), err)
		}

		p.Enums = append(p.Enums, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Thrift) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	p.Structs = make([]*StructLike, 0, size)
	for i := 0; i < size; i++ {
		_elem := &StructLike{}
		if err := _elem.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("error reading struct %T: ", _elem), err)
		}

		p.Structs = append(p.Structs, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Thrift) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	p.Unions = make([]*StructLike, 0, size)
	for i := 0; i < size; i++ {
		_elem := &StructLike{}
		if err := _elem.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("error reading struct %T: ", _elem), err)
		}

		p.Unions = append(p.Unions, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Thrift) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	p.Exceptions = make([]*StructLike, 0, size)
	for i := 0; i < size; i++ {
		_elem := &StructLike{}
		if err := _elem.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("error reading struct %T: ", _elem), err)
		}

		p.Exceptions = append(p.Exceptions, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Thrift) ReadField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	p.Services = make([]*Service, 0, size)
	for i := 0; i < size; i++ {
		_elem := &Service{}
		if err := _elem.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("error reading struct %T: ", _elem), err)
		}

		p.Services = append(p.Services, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Thrift) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Thrift"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 1 'Filename' error: ", p), err)
		}
		if err := p.writeField2(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 2 'Includes' error: ", p), err)
		}
		if err := p.writeField3(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 3 'CppIncludes' error: ", p), err)
		}
		if err := p.writeField4(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 4 'Namespaces' error: ", p), err)
		}
		if err := p.writeField5(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 5 'Typedefs' error: ", p), err)
		}
		if err := p.writeField6(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 6 'Constants' error: ", p), err)
		}
		if err := p.writeField7(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 7 'Enums' error: ", p), err)
		}
		if err := p.writeField8(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 8 'Structs' error: ", p), err)
		}
		if err := p.writeField9(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 9 'Unions' error: ", p), err)
		}
		if err := p.writeField10(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 10 'Exceptions' error: ", p), err)
		}
		if err := p.writeField11(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 11 'Services' error: ", p), err)
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
	}
	return nil
}

func (p *Thrift) writeField1(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Filename", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 1 'Filename' begin error: ", p), err)
	}
	if err := oprot.WriteString(p.Filename); err != nil {
		return thrift.PrependError("error writing type String: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 1 'Filename' end error: ", p), err)
	}
	return nil
}

func (p *Thrift) writeField2(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Includes", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 2 'Includes' begin error: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Includes)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Includes {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 2 'Includes' end error: ", p), err)
	}
	return nil
}

func (p *Thrift) writeField3(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("CppIncludes", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 3 'CppIncludes' begin error: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.CppIncludes)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.CppIncludes {
		if err := oprot.WriteString(v); err != nil {
			return thrift.PrependError("error writing type String: ", err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 3 'CppIncludes' end error: ", p), err)
	}
	return nil
}

func (p *Thrift) writeField4(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Namespaces", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 4 'Namespaces' begin error: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Namespaces)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Namespaces {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 4 'Namespaces' end error: ", p), err)
	}
	return nil
}

func (p *Thrift) writeField5(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Typedefs", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 5 'Typedefs' begin error: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Typedefs)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Typedefs {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 5 'Typedefs' end error: ", p), err)
	}
	return nil
}

func (p *Thrift) writeField6(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Constants", thrift.LIST, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 6 'Constants' begin error: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Constants)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Constants {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 6 'Constants' end error: ", p), err)
	}
	return nil
}

func (p *Thrift) writeField7(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Enums", thrift.LIST, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 7 'Enums' begin error: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Enums)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Enums {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 7 'Enums' end error: ", p), err)
	}
	return nil
}

func (p *Thrift) writeField8(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Structs", thrift.LIST, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 8 'Structs' begin error: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Structs)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Structs {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 8 'Structs' end error: ", p), err)
	}
	return nil
}

func (p *Thrift) writeField9(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Unions", thrift.LIST, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 9 'Unions' begin error: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Unions)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Unions {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 9 'Unions' end error: ", p), err)
	}
	return nil
}

func (p *Thrift) writeField10(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Exceptions", thrift.LIST, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 10 'Exceptions' begin error: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Exceptions)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Exceptions {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 10 'Exceptions' end error: ", p), err)
	}
	return nil
}

func (p *Thrift) writeField11(oprot thrift.TProtocol) error {
	if err := oprot.WriteFieldBegin("Services", thrift.LIST, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 11 'Services' begin error: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Services)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Services {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field 11 'Services' end error: ", p), err)
	}
	return nil
}

func (p *Thrift) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Thrift(%+v)", *p)
}

type ConstTypedValue struct {
	Double *float64 `thrift:"Double,1" json:"Double,omitempty"`

	Int *int64 `thrift:"Int,2" json:"Int,omitempty"`

	Literal *string `thrift:"Literal,3" json:"Literal,omitempty"`

	Identifier *string `thrift:"Identifier,4" json:"Identifier,omitempty"`

	List []*ConstValue `thrift:"List,5" json:"List,omitempty"`

	Map []*MapConstValue `thrift:"Map,6" json:"Map,omitempty"`
}

func NewConstTypedValue() *ConstTypedValue {
	return &ConstTypedValue{}
}

var ConstTypedValue_Double_DEFAULT float64

func (p *ConstTypedValue) GetDouble() float64 {
	if !p.IsSetDouble() {
		return ConstTypedValue_Double_DEFAULT
	}
	return *p.Double
}

var ConstTypedValue_Int_DEFAULT int64

func (p *ConstTypedValue) GetInt() int64 {
	if !p.IsSetInt() {
		return ConstTypedValue_Int_DEFAULT
	}
	return *p.Int
}

var ConstTypedValue_Literal_DEFAULT string

func (p *ConstTypedValue) GetLiteral() string {
	if !p.IsSetLiteral() {
		return ConstTypedValue_Literal_DEFAULT
	}
	return *p.Literal
}

var ConstTypedValue_Identifier_DEFAULT string

func (p *ConstTypedValue) GetIdentifier() string {
	if !p.IsSetIdentifier() {
		return ConstTypedValue_Identifier_DEFAULT
	}
	return *p.Identifier
}

var ConstTypedValue_List_DEFAULT []*ConstValue

func (p *ConstTypedValue) GetList() []*ConstValue {
	if !p.IsSetList() {
		return ConstTypedValue_List_DEFAULT
	}
	return p.List
}

var ConstTypedValue_Map_DEFAULT []*MapConstValue

func (p *ConstTypedValue) GetMap() []*MapConstValue {
	if !p.IsSetMap() {
		return ConstTypedValue_Map_DEFAULT
	}
	return p.Map
}

func (p *ConstTypedValue) CountSetFieldsConstTypedValue() int {
	count := 0
	if p.IsSetDouble() {
		count++
	}
	if p.IsSetInt() {
		count++
	}
	if p.IsSetLiteral() {
		count++
	}
	if p.IsSetIdentifier() {
		count++
	}
	if p.IsSetList() {
		count++
	}
	if p.IsSetMap() {
		count++
	}
	return count
}

func (p *ConstTypedValue) IsSetDouble() bool {
	return p.Double != nil
}

func (p *ConstTypedValue) IsSetInt() bool {
	return p.Int != nil
}

func (p *ConstTypedValue) IsSetLiteral() bool {
	return p.Literal != nil
}

func (p *ConstTypedValue) IsSetIdentifier() bool {
	return p.Identifier != nil
}

func (p *ConstTypedValue) IsSetList() bool {
	return p.List != nil
}

func (p *ConstTypedValue) IsSetMap() bool {
	return p.Map != nil
}

func (p *ConstTypedValue) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField1(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 1 'Double' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 1 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 2 'Int' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 2 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 3 'Literal' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 3 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 4 'Identifier' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 4 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField5(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 5 'List' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 5 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField6(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T read field 6 'Map' error: ", p), err)
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T field 6 skip type %d error: ", p, fieldTypeId), err)
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T skip field %d type %d error: ", p, fieldId, fieldTypeId), err)
			}
		}

		if err := iprot.ReadFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ConstTypedValue) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading type Double: ", err)
	} else {
		p.Double = &v
	}
	return nil
}

func (p *ConstTypedValue) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading type I64: ", err)
	} else {
		p.Int = &v
	}
	return nil
}

func (p *ConstTypedValue) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading type String: ", err)
	} else {
		p.Literal = &v
	}
	return nil
}

func (p *ConstTypedValue) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading type String: ", err)
	} else {
		p.Identifier = &v
	}
	return nil
}

func (p *ConstTypedValue) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	p.List = make([]*ConstValue, 0, size)
	for i := 0; i < size; i++ {
		_elem := &ConstValue{}
		if err := _elem.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("error reading struct %T: ", _elem), err)
		}

		p.List = append(p.List, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ConstTypedValue) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	p.Map = make([]*MapConstValue, 0, size)
	for i := 0; i < size; i++ {
		_elem := &MapConstValue{}
		if err := _elem.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("error reading struct %T: ", _elem), err)
		}

		p.Map = append(p.Map, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ConstTypedValue) Write(oprot thrift.TProtocol) error {
	if c := p.CountSetFieldsConstTypedValue(); c != 1 {
		return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
	}
	if err := oprot.WriteStructBegin("ConstTypedValue"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 1 'Double' error: ", p), err)
		}
		if err := p.writeField2(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 2 'Int' error: ", p), err)
		}
		if err := p.writeField3(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 3 'Literal' error: ", p), err)
		}
		if err := p.writeField4(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 4 'Identifier' error: ", p), err)
		}
		if err := p.writeField5(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 5 'List' error: ", p), err)
		}
		if err := p.writeField6(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 6 'Map' error: ", p), err)
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
	}
	return nil
}

func (p *ConstTypedValue) writeField1(oprot thrift.TProtocol) error {
	if p.IsSetDouble() {
		if err := oprot.WriteFieldBegin("Double", thrift.DOUBLE, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 1 'Double' begin error: ", p), err)
		}
		if err := oprot.WriteDouble(*p.Double); err != nil {
			return thrift.PrependError("error writing type Double: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 1 'Double' end error: ", p), err)
		}
	}
	return nil
}

func (p *ConstTypedValue) writeField2(oprot thrift.TProtocol) error {
	if p.IsSetInt() {
		if err := oprot.WriteFieldBegin("Int", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 2 'Int' begin error: ", p), err)
		}
		if err := oprot.WriteI64(*p.Int); err != nil {
			return thrift.PrependError("error writing type I64: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 2 'Int' end error: ", p), err)
		}
	}
	return nil
}

func (p *ConstTypedValue) writeField3(oprot thrift.TProtocol) error {
	if p.IsSetLiteral() {
		if err := oprot.WriteFieldBegin("Literal", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 3 'Literal' begin error: ", p), err)
		}
		if err := oprot.WriteString(*p.Literal); err != nil {
			return thrift.PrependError("error writing type String: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 3 'Literal' end error: ", p), err)
		}
	}
	return nil
}

func (p *ConstTypedValue) writeField4(oprot thrift.TProtocol) error {
	if p.IsSetIdentifier() {
		if err := oprot.WriteFieldBegin("Identifier", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 4 'Identifier' begin error: ", p), err)
		}
		if err := oprot.WriteString(*p.Identifier); err != nil {
			return thrift.PrependError("error writing type String: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 4 'Identifier' end error: ", p), err)
		}
	}
	return nil
}

func (p *ConstTypedValue) writeField5(oprot thrift.TProtocol) error {
	if p.IsSetList() {
		if err := oprot.WriteFieldBegin("List", thrift.LIST, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 5 'List' begin error: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.List)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.List {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 5 'List' end error: ", p), err)
		}
	}
	return nil
}

func (p *ConstTypedValue) writeField6(oprot thrift.TProtocol) error {
	if p.IsSetMap() {
		if err := oprot.WriteFieldBegin("Map", thrift.LIST, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 6 'Map' begin error: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Map)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Map {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field 6 'Map' end error: ", p), err)
		}
	}
	return nil
}

func (p *ConstTypedValue) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConstTypedValue(%+v)", *p)
}
