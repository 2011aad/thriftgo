// Copyright 2021 CloudWeGo Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package plugin

import (
	"fmt"

	"github.com/cloudwego/thriftgo/parser"

	"github.com/apache/thrift/lib/go/thrift"
)

// Attributes:
//  - Version
//  - GeneratorParameters
//  - PluginParameters
//  - Language
//  - OutputPath
//  - Recursive
//  - AST
type Request struct {
	Version             string         `thrift:"Version,1,required" db:"Version" json:"Version"`
	GeneratorParameters []string       `thrift:"GeneratorParameters,2,required" db:"GeneratorParameters" json:"GeneratorParameters"`
	PluginParameters    []string       `thrift:"PluginParameters,3,required" db:"PluginParameters" json:"PluginParameters"`
	Language            string         `thrift:"Language,4,required" db:"Language" json:"Language"`
	OutputPath          string         `thrift:"OutputPath,5,required" db:"OutputPath" json:"OutputPath"`
	Recursive           bool           `thrift:"Recursive,6,required" db:"Recursive" json:"Recursive"`
	AST                 *parser.Thrift `thrift:"AST,7,required" db:"AST" json:"AST"`
}

func NewRequest() *Request {
	return &Request{}
}

func (p *Request) GetVersion() string {
	return p.Version
}

func (p *Request) GetGeneratorParameters() []string {
	return p.GeneratorParameters
}

func (p *Request) GetPluginParameters() []string {
	return p.PluginParameters
}

func (p *Request) GetLanguage() string {
	return p.Language
}

func (p *Request) GetOutputPath() string {
	return p.OutputPath
}

func (p *Request) GetRecursive() bool {
	return p.Recursive
}

var Request_AST_DEFAULT *parser.Thrift

func (p *Request) GetAST() *parser.Thrift {
	if !p.IsSetAST() {
		return Request_AST_DEFAULT
	}
	return p.AST
}
func (p *Request) IsSetAST() bool {
	return p.AST != nil
}

func (p *Request) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetVersion bool = false
	var issetGeneratorParameters bool = false
	var issetPluginParameters bool = false
	var issetLanguage bool = false
	var issetOutputPath bool = false
	var issetRecursive bool = false
	var issetAST bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetVersion = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetGeneratorParameters = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
				issetPluginParameters = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
				issetLanguage = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
				issetOutputPath = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
				issetRecursive = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
				issetAST = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Version is not set"))
	}
	if !issetGeneratorParameters {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GeneratorParameters is not set"))
	}
	if !issetPluginParameters {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PluginParameters is not set"))
	}
	if !issetLanguage {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Language is not set"))
	}
	if !issetOutputPath {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field OutputPath is not set"))
	}
	if !issetRecursive {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Recursive is not set"))
	}
	if !issetAST {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AST is not set"))
	}
	return nil
}

func (p *Request) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *Request) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.GeneratorParameters = tSlice
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem0 = v
		}
		p.GeneratorParameters = append(p.GeneratorParameters, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Request) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.PluginParameters = tSlice
	for i := 0; i < size; i++ {
		var _elem1 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem1 = v
		}
		p.PluginParameters = append(p.PluginParameters, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Request) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Language = v
	}
	return nil
}

func (p *Request) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.OutputPath = v
	}
	return nil
}

func (p *Request) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Recursive = v
	}
	return nil
}

func (p *Request) ReadField7(iprot thrift.TProtocol) error {
	p.AST = &parser.Thrift{}
	if err := p.AST.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AST), err)
	}
	return nil
}

func (p *Request) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Request"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Request) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Version", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Version: ", p), err)
	}
	if err := oprot.WriteString(string(p.Version)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Version: ", p), err)
	}
	return err
}

func (p *Request) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("GeneratorParameters", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:GeneratorParameters: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.GeneratorParameters)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.GeneratorParameters {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:GeneratorParameters: ", p), err)
	}
	return err
}

func (p *Request) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("PluginParameters", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:PluginParameters: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.PluginParameters)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.PluginParameters {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:PluginParameters: ", p), err)
	}
	return err
}

func (p *Request) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Language", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Language: ", p), err)
	}
	if err := oprot.WriteString(string(p.Language)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Language (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Language: ", p), err)
	}
	return err
}

func (p *Request) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("OutputPath", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:OutputPath: ", p), err)
	}
	if err := oprot.WriteString(string(p.OutputPath)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.OutputPath (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:OutputPath: ", p), err)
	}
	return err
}

func (p *Request) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Recursive", thrift.BOOL, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:Recursive: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Recursive)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Recursive (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:Recursive: ", p), err)
	}
	return err
}

func (p *Request) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("AST", thrift.STRUCT, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:AST: ", p), err)
	}
	if err := p.AST.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AST), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:AST: ", p), err)
	}
	return err
}

func (p *Request) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Request(%+v)", *p)
}

// Attributes:
//  - Content
//  - Name
//  - InsertionPoint
type Generated struct {
	Content        string  `thrift:"Content,1,required" db:"Content" json:"Content"`
	Name           *string `thrift:"Name,2" db:"Name" json:"Name,omitempty"`
	InsertionPoint *string `thrift:"InsertionPoint,3" db:"InsertionPoint" json:"InsertionPoint,omitempty"`
}

func NewGenerated() *Generated {
	return &Generated{}
}

func (p *Generated) GetContent() string {
	return p.Content
}

var Generated_Name_DEFAULT string

func (p *Generated) GetName() string {
	if !p.IsSetName() {
		return Generated_Name_DEFAULT
	}
	return *p.Name
}

var Generated_InsertionPoint_DEFAULT string

func (p *Generated) GetInsertionPoint() string {
	if !p.IsSetInsertionPoint() {
		return Generated_InsertionPoint_DEFAULT
	}
	return *p.InsertionPoint
}
func (p *Generated) IsSetName() bool {
	return p.Name != nil
}

func (p *Generated) IsSetInsertionPoint() bool {
	return p.InsertionPoint != nil
}

func (p *Generated) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetContent bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetContent = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetContent {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Content is not set"))
	}
	return nil
}

func (p *Generated) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Content = v
	}
	return nil
}

func (p *Generated) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = &v
	}
	return nil
}

func (p *Generated) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.InsertionPoint = &v
	}
	return nil
}

func (p *Generated) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Generated"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Generated) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Content", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Content: ", p), err)
	}
	if err := oprot.WriteString(string(p.Content)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Content (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Content: ", p), err)
	}
	return err
}

func (p *Generated) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err := oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Name: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Name)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.Name (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Name: ", p), err)
		}
	}
	return err
}

func (p *Generated) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetInsertionPoint() {
		if err := oprot.WriteFieldBegin("InsertionPoint", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:InsertionPoint: ", p), err)
		}
		if err := oprot.WriteString(string(*p.InsertionPoint)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.InsertionPoint (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:InsertionPoint: ", p), err)
		}
	}
	return err
}

func (p *Generated) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Generated(%+v)", *p)
}

// Attributes:
//  - Error
//  - Contents
//  - Warnings
type Response struct {
	Error    *string      `thrift:"Error,1" db:"Error" json:"Error,omitempty"`
	Contents []*Generated `thrift:"Contents,2" db:"Contents" json:"Contents,omitempty"`
	Warnings []string     `thrift:"Warnings,3" db:"Warnings" json:"Warnings,omitempty"`
}

func NewResponse() *Response {
	return &Response{}
}

var Response_Error_DEFAULT string

func (p *Response) GetError() string {
	if !p.IsSetError() {
		return Response_Error_DEFAULT
	}
	return *p.Error
}

var Response_Contents_DEFAULT []*Generated

func (p *Response) GetContents() []*Generated {
	return p.Contents
}

var Response_Warnings_DEFAULT []string

func (p *Response) GetWarnings() []string {
	return p.Warnings
}
func (p *Response) IsSetError() bool {
	return p.Error != nil
}

func (p *Response) IsSetContents() bool {
	return p.Contents != nil
}

func (p *Response) IsSetWarnings() bool {
	return p.Warnings != nil
}

func (p *Response) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Response) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Error = &v
	}
	return nil
}

func (p *Response) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Generated, 0, size)
	p.Contents = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &Generated{}
		if err := _elem2.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
		}
		p.Contents = append(p.Contents, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Response) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Warnings = tSlice
	for i := 0; i < size; i++ {
		var _elem3 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem3 = v
		}
		p.Warnings = append(p.Warnings, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Response) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Response"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Response) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetError() {
		if err := oprot.WriteFieldBegin("Error", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Error: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Error)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.Error (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Error: ", p), err)
		}
	}
	return err
}

func (p *Response) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetContents() {
		if err := oprot.WriteFieldBegin("Contents", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Contents: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Contents)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Contents {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Contents: ", p), err)
		}
	}
	return err
}

func (p *Response) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetWarnings() {
		if err := oprot.WriteFieldBegin("Warnings", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Warnings: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Warnings)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Warnings {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Warnings: ", p), err)
		}
	}
	return err
}

func (p *Response) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Response(%+v)", *p)
}
